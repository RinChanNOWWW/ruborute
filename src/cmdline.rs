use std::rc::Rc;

use clap::Clap;
use rustyline::{error::ReadlineError, Editor};

use crate::{
    command,
    storage::{self, MusicRecordStore},
    Result,
};

#[derive(Clap)]
#[clap(name = "asphyxia-rsdvx", version = env!("CARGO_PKG_VERSION"), author = env!("CARGO_PKG_AUTHORS"))]
pub struct Opt {
    #[clap(
        long,
        name = "user-id",
        about = "your sdvx user id generated by asphyxia@sdvx plugin",
        required = true
    )]
    user: String,
    #[clap(
        long = "db",
        name = "path-to-db",
        about = "the path of your game db file",
        required = true
    )]
    db_path: String,
}

pub fn run_cmdline(opt: Opt) -> Result<()> {
    let store = Rc::new(storage::MusicRecordStore::open(opt.user, opt.db_path)?);

    println!(
        "music records data of `{}` has been loaded.",
        store.get_user()
    );

    // run interactive cmdline
    let mut rl = Editor::<()>::new();
    loop {
        let readline = rl.readline(">> ");
        match readline {
            Ok(line) => {
                let cmds: Vec<String> = line
                    .trim()
                    .split(" ")
                    .filter(|&s| s.ne(""))
                    .map(|s| String::from(s))
                    .collect();
                if cmds.len() == 0 {
                    continue;
                }
                interact(Rc::clone(&store), cmds);
            }
            Err(ReadlineError::Eof) | Err(ReadlineError::Interrupted) => {
                println!("Bye");
                break;
            }
            Err(e) => {
                println!("read command error: {}", &e);
                break;
            }
        }
    }

    Ok(())
}

fn interact(store: Rc<MusicRecordStore>, cmds: Vec<String>) {
    let cmd = command::new_command(store, cmds);
    match cmd {
        Ok(c) => {
            if let Err(e) = c.do_cmd() {
                println!("{}", &e)
            }
        }
        Err(e) => {
            println!("{}", &e);
        }
    }
}
